
MySQL
Exercise 2

1. Select from any table a number and determine whether it is within a given range (for example, between 1 and 10).
mysql> CREATE TABLE NumbersTable (
    ->     ID INT PRIMARY KEY,
    ->     Number INT
    -> );
mysql> INSERT INTO NumbersTable (ID, Number)
    -> VALUES (1, 5), (2, 15), (3, 8), (4, 12), (5, 20);
mysql> DELIMITER $$
mysql>
mysql> CREATE PROCEDURE CheckNumberRange(
    ->     IN MinRange INT,
    ->     IN MaxRange INT
    -> )
    -> BEGIN
    ->     SELECT ID, Number,
    ->            CASE
    ->                WHEN Number BETWEEN MinRange AND MaxRange THEN 'Within Range'
    ->                ELSE 'Out of Range'
    ->            END AS RangeStatus
    ->     FROM NumbersTable;
    -> END$$
Query OK, 0 rows affected (0.01 sec)

mysql>
mysql> DELIMITER ;
mysql> CALL CheckNumberRange(3, 8);
+----+--------+--------------+
| ID | Number | RangeStatus  |
+----+--------+--------------+
|  1 |      5 | Within Range |
|  2 |     15 | Out of Range |
|  3 |      8 | Within Range |
|  4 |     12 | Out of Range |
|  5 |     20 | Out of Range |
+----+--------+--------------+


2. Select from any table three positive integers representing the sides of a triangle, and determine whether they form a valid triangle. Hint: In a triangle, the sum of any two sides must always be greater than the third side.
mysql> CREATE TABLE TriangleSides (
    ->     ID INT PRIMARY KEY,
    ->     SideA INT NOT NULL,
    ->     SideB INT NOT NULL,
    ->     SideC INT NOT NULL
    -> );
Query OK, 0 rows affected (0.05 sec)

mysql> INSERT INTO TriangleSides (ID, SideA, SideB, SideC)
    -> VALUES
    ->     (1, 3, 4, 5), 
    ->     (2, 1, 1, 3), 
    ->     (3, 6, 8, 10); 
Query OK, 3 rows affected (0.01 sec)
Records: 3  Duplicates: 0  Warnings: 0

mysql> DELIMITER $$
mysql>
mysql> CREATE PROCEDURE CheckTriangleValidity()
    -> BEGIN
    ->     SELECT ID, SideA, SideB, SideC,
    ->            CASE
    ->                WHEN (SideA + SideB > SideC)
    ->                     AND (SideA + SideC > SideB)
    ->                     AND (SideB + SideC > SideA)
    ->                THEN 'Valid Triangle'
    ->                ELSE 'Not a Valid Triangle'
    ->            END AS TriangleStatus
    ->     FROM TriangleSides;
    -> END$$
Query OK, 0 rows affected (0.01 sec)

mysql>
mysql> DELIMITER ;
mysql> CALL CheckTriangleValidity();
+----+-------+-------+-------+----------------------+
| ID | SideA | SideB | SideC | TriangleStatus       |
+----+-------+-------+-------+----------------------+
|  1 |     3 |     4 |     5 | Valid Triangle       |
|  2 |     1 |     1 |     3 | Not a Valid Triangle |
|  3 |     6 |     8 |    10 | Valid Triangle       |
+----+-------+-------+-------+----------------------+

3. Check if a given a year is a leap year. The condition is:- year should be (divisible by 4 and not divisible by 100) or (divisible by 4 and divisible by 400.). The year should be Selected from some table.
-----> CREATE TABLE YearTable (
    ->     ID INT PRIMARY KEY,
    ->     Year INT NOT NULL
    -> );
Query OK, 0 rows affected (0.05 sec)

mysql> INSERT INTO YearTable (ID, Year)
    -> VALUES
    ->     (1, 2000),
    ->     (2, 1900),
    ->     (3, 2024),
    ->     (4, 2023);
Query OK, 4 rows affected (0.01 sec)
Records: 4  Duplicates: 0  Warnings: 0

mysql> DELIMITER $$
mysql>
mysql> CREATE PROCEDURE CheckLeapYear()
    -> BEGIN
    ->     SELECT ID, Year,
    ->            CASE
    ->                WHEN (Year % 4 = 0 AND Year % 100 != 0) OR (Year % 400 = 0)
    ->                THEN 'Leap Year'
    ->                ELSE 'Not a Leap Year'
    ->            END AS LeapYearStatus
    ->     FROM YearTable;
    -> END$$
Query OK, 0 rows affected (0.01 sec)

mysql>
mysql> DELIMITER ;
mysql> CALL CheckLeapYear();
+----+------+-----------------+
| ID | Year | LeapYearStatus  |
+----+------+-----------------+
|  1 | 2000 | Leap Year       |
|  2 | 1900 | Not a Leap Year |
|  3 | 2024 | Leap Year       |
|  4 | 2023 | Not a Leap Year |
+----+------+-----------------+

4. Write a program that Selects from any table two character strings. Your program should then determine if one character string exists inside another character string.
-----> CREATE TABLE StringTable (
    ->     ID INT PRIMARY KEY,
    ->     String1 VARCHAR(255),
    ->     String2 VARCHAR(255)
    -> );
Query OK, 0 rows affected (0.05 sec)

mysql> INSERT INTO StringTable (ID, String1, String2)
    -> VALUES
    ->     (1, 'Hello World', 'World'),
    ->     (2, 'MySQL Procedure', 'SQL'),
    ->     (3, 'Database Management', 'Data'),
    ->     (4, 'Programming', 'Code');
Query OK, 4 rows affected (0.01 sec)
Records: 4  Duplicates: 0  Warnings: 0

mysql> DELIMITER $$
mysql>
mysql> CREATE PROCEDURE CheckStringExistence()
    -> BEGIN
    ->     SELECT ID, String1, String2,
    ->            CASE
    ->                WHEN LOCATE(String2, String1) > 0 THEN 'Exists'
    ->                ELSE 'Does Not Exist'
    ->            END AS ExistenceStatus
    ->     FROM StringTable;
    -> END$$
Query OK, 0 rows affected (0.01 sec)

mysql>
mysql> DELIMITER ;
mysql> CALL CheckStringExistence();
+----+---------------------+---------+-----------------+
| ID | String1             | String2 | ExistenceStatus |
+----+---------------------+---------+-----------------+
|  1 | Hello World         | World   | Exists          |
|  2 | MySQL Procedure     | SQL     | Exists          |
|  3 | Database Management | Data    | Exists          |
|  4 | Programming         | Code    | Does Not Exist  |
+----+---------------------+---------+-----------------+